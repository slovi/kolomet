// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cz.kolomet.domain.codelist;

import cz.kolomet.domain.codelist.PlaceTypeDataOnDemand;
import cz.kolomet.domain.codelist.PlaceTypeIntegrationTest;
import cz.kolomet.repository.PlaceTypeRepository;
import cz.kolomet.service.PlaceTypeService;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect PlaceTypeIntegrationTest_Roo_IntegrationTest {
    
    declare @type: PlaceTypeIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: PlaceTypeIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: PlaceTypeIntegrationTest: @Transactional;
    
    @Autowired
    PlaceTypeDataOnDemand PlaceTypeIntegrationTest.dod;
    
    @Autowired
    PlaceTypeService PlaceTypeIntegrationTest.placeTypeService;
    
    @Autowired
    PlaceTypeRepository PlaceTypeIntegrationTest.placeTypeRepository;
    
    @Test
    public void PlaceTypeIntegrationTest.testCountAllPlaceTypes() {
        Assert.assertNotNull("Data on demand for 'PlaceType' failed to initialize correctly", dod.getRandomPlaceType());
        long count = placeTypeService.countAllPlaceTypes();
        Assert.assertTrue("Counter for 'PlaceType' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void PlaceTypeIntegrationTest.testFindPlaceType() {
        PlaceType obj = dod.getRandomPlaceType();
        Assert.assertNotNull("Data on demand for 'PlaceType' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'PlaceType' failed to provide an identifier", id);
        obj = placeTypeService.findPlaceType(id);
        Assert.assertNotNull("Find method for 'PlaceType' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'PlaceType' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void PlaceTypeIntegrationTest.testFindAllPlaceTypes() {
        Assert.assertNotNull("Data on demand for 'PlaceType' failed to initialize correctly", dod.getRandomPlaceType());
        long count = placeTypeService.countAllPlaceTypes();
        Assert.assertTrue("Too expensive to perform a find all test for 'PlaceType', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<PlaceType> result = placeTypeService.findAllPlaceTypes();
        Assert.assertNotNull("Find all method for 'PlaceType' illegally returned null", result);
        Assert.assertTrue("Find all method for 'PlaceType' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void PlaceTypeIntegrationTest.testFindPlaceTypeEntries() {
        Assert.assertNotNull("Data on demand for 'PlaceType' failed to initialize correctly", dod.getRandomPlaceType());
        long count = placeTypeService.countAllPlaceTypes();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<PlaceType> result = placeTypeService.findPlaceTypeEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'PlaceType' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'PlaceType' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void PlaceTypeIntegrationTest.testFlush() {
        PlaceType obj = dod.getRandomPlaceType();
        Assert.assertNotNull("Data on demand for 'PlaceType' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'PlaceType' failed to provide an identifier", id);
        obj = placeTypeService.findPlaceType(id);
        Assert.assertNotNull("Find method for 'PlaceType' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyPlaceType(obj);
        Integer currentVersion = obj.getVersion();
        placeTypeRepository.flush();
        Assert.assertTrue("Version for 'PlaceType' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void PlaceTypeIntegrationTest.testUpdatePlaceTypeUpdate() {
        PlaceType obj = dod.getRandomPlaceType();
        Assert.assertNotNull("Data on demand for 'PlaceType' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'PlaceType' failed to provide an identifier", id);
        obj = placeTypeService.findPlaceType(id);
        boolean modified =  dod.modifyPlaceType(obj);
        Integer currentVersion = obj.getVersion();
        PlaceType merged = (PlaceType)placeTypeService.updatePlaceType(obj);
        placeTypeRepository.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'PlaceType' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void PlaceTypeIntegrationTest.testSavePlaceType() {
        Assert.assertNotNull("Data on demand for 'PlaceType' failed to initialize correctly", dod.getRandomPlaceType());
        PlaceType obj = dod.getNewTransientPlaceType(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'PlaceType' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'PlaceType' identifier to be null", obj.getId());
        placeTypeService.savePlaceType(obj);
        placeTypeRepository.flush();
        Assert.assertNotNull("Expected 'PlaceType' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void PlaceTypeIntegrationTest.testDeletePlaceType() {
        PlaceType obj = dod.getRandomPlaceType();
        Assert.assertNotNull("Data on demand for 'PlaceType' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'PlaceType' failed to provide an identifier", id);
        obj = placeTypeService.findPlaceType(id);
        placeTypeService.deletePlaceType(obj);
        placeTypeRepository.flush();
        Assert.assertNull("Failed to remove 'PlaceType' with identifier '" + id + "'", placeTypeService.findPlaceType(id));
    }
    
}
